#lang racket

(define last-element
   (lambda (lst)
      (if (eq? (cdr lst) '())
           (car lst)
            (last-element (cdr lst))
            )))

(define power
    (lambda (n1 n2)
      (if (eq? n2 1)
           n1
      (* n1 (power n1 (- n2 1))))))


(define sum-lst-power
    (lambda (lst n)
      (if (eq? lst '())
          0
      (if (eq? (cdr lst) '())
          (power (car lst) n)
      (+ (power (car lst) n) (sum-lst-power (cdr lst) n))))
    )
)

;;helper function

(define length
   (lambda (lst)
      (if (eq? lst '())
          0
      (if (eq? (cdr lst) '())
          1
          (+ 1 (length (cdr lst)))
     ))))


(define num-from-digits
  (lambda (lst)
      (if (eq? (cdr lst) '())
           (car lst)
            (+ (* (car lst) (power 10 (- (length lst) 1))) (num-from-digits (cdr lst))
            ))))


(define is-narcissistic
  (lambda (lst)
    (if (eq? lst '())
        #t
       (eq? (num-from-digits lst) (sum-lst-power lst (length lst)))
    )))
 
